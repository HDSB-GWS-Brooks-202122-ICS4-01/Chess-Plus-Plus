import java.util.ArrayList;
import java.util.Arrays;

/**
 * Class for board data that is used by the A.I.
 * 
 * @author Akil Pathiranage
 * @version 1.0
 */
public class BoardInfo {
    byte[][] board;
    int[] passant;
    boolean[] hasMoved;
    String previousMove;
    int moveCount;

    byte whiteKingX;
    byte whiteKingY;

    byte blackKingX;
    byte blackKingY; 

    /**
     * Constructor for BoardInfo class.
     * @param board Positions of everything on the board.
     * @param passant An array of integers represnting the passant attribute for each pawn.
     * @param hasMoved An array of booleans representing the hasMoved attributes for kings and rooks. 
     * @param moveCount The current movecount on the board. 
     */
    public BoardInfo(byte[][] board, int[] passant, boolean[] hasMoved, int moveCount){

        this.moveCount = moveCount;
        this.board = board;
        this.passant = passant;
        this.hasMoved = hasMoved;
    }
    
    
    
    /**
     * Method for evaluating the value of the board. Evaluating a board means to
     * apply a value for it,
     * this is used in the minimax algorithm.
     * 
     * @return an Integer represnting the score for this board.
     */
    public int evaluate() {
        return 0;
    }

    /**
     * Method for deep copying a BoardInfo object. 
     * @return A new BoardInfo object that is a deep copy of the original. 
     */
    public BoardInfo copy(){
        BoardInfo copy = new BoardInfo(deepCopy(board), Arrays.copyOf(passant, passant.length), Arrays.copyOf(hasMoved, hasMoved.length), moveCount);
        copy.setKingPos(false, whiteKingX, whiteKingY);
        copy.setKingPos(true, blackKingX, blackKingY);
        return copy;
    }




    /**
     * Sets the previous move string. This string is used to determine which move led to a move to create the board.
     * If the string is null, that means that this board was not generated by the bot.
     * The pattern for the string goes first as a single character, numbers representing the id, followed by a period, then two digits
     * representing the new location. 
     * 
     * If it is a pawn promotion, the string will be the same, except after the new location there will be another period and after that there will be digits
     * representing the id of the new piece it is promoted to. 
     * 
     * @param move The new string to set it to.
     */
    public void setPreviousMove(String move){
        this.previousMove = move;

    }

    /**
     * This method deep copies any two dimensional byte array, it is mainly meant to be used by the BoardInfo copy() method to create a deepcopy of the BoardInfo object. 
     * @param original Original 2-d byte array to copy. 
     * @return A new 2-d byte array containing all the same elements with no references to the original.
     */
    public byte[][] deepCopy(byte[][] original){
        byte[][] newArray = new byte[original.length][original[0].length];
        for(int i = 0; i < original.length; i++){
            newArray[i] = Arrays.copyOf(original[i], original[i].length);
        }
        return newArray;

    }

    /**
     * This method sets the king position attribute of the BoardInfo object, and also updates it's position on the board.
     * @param black Color of the king, true if the king is black, false if not.
     * @param x X location to put the king at.
     * @param y Y location to put the king at. 
     */
    public void setKingPos(boolean black, byte x, byte y){
        if(black){
            blackKingX = x;
            blackKingY = y;
            board[x][y] = Constants.pieceIDs.BLACK_KING;
        } else {
            whiteKingX = x;
            whiteKingY = y;
            board[x][y] = Constants.pieceIDs.WHITE_KING;
        }
    }
    
}
